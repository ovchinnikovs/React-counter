{"version":3,"sources":["components/Counter.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","state","counter","isVisible","plusCount","_this","setState","minusCount","handleToggleCounter","_this$state","this","react_default","a","createElement","Fragment","onClick","Component","App","className","Counter_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAGqBA,oNAEnBC,MAAQ,CACNC,QAAS,EACTC,WAAW,KAGbC,UAAY,WAAM,IACVF,EAAYG,EAAKJ,MAAjBC,QAENG,EAAKC,SAAS,CACZJ,UAAWA,OAIfK,WAAa,WAAM,IACXL,EAAYG,EAAKJ,MAAjBC,QAENG,EAAKC,SAAS,CACZJ,UAAWA,OAIfM,oBAAsB,WAAM,IACpBL,EAAcE,EAAKJ,MAAnBE,UAENE,EAAKC,SAAS,CACZH,WAAYA,6EAIP,IAAAM,EACwBC,KAAKT,MAA5BC,EADDO,EACCP,QAASC,EADVM,EACUN,UAEjB,OACEQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAKV,EAAYD,EAAU,MAC3BS,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKN,WAAtB,KACAO,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKH,YAAtB,KACAI,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKF,qBAAsBL,EAAY,OAAS,QAChEA,GAAyB,KAAZD,EAAiBS,EAAAC,EAAAC,cAAA,gFAAsB,aAxCxBG,cCStBC,MARf,WACE,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACM,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b2b04989.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./Counter.css\"\n\nexport default class Counter extends Component {\n\n  state = {\n    counter: 0,\n    isVisible: true,\n  }\n\n  plusCount = () => {\n    let { counter } = this.state;\n\n    this.setState({\n      counter: ++counter,\n    })\n  }\n\n  minusCount = () => {\n    let { counter } = this.state;\n\n    this.setState({\n      counter: --counter,\n    })\n  }\n\n  handleToggleCounter = () => {\n    let { isVisible } = this.state;\n\n    this.setState({\n      isVisible: !isVisible,\n    })\n  }\n\n  render() {\n    const { counter, isVisible } = this.state\n\n    return (\n      <>\n        <h1>{isVisible ? counter : null}</h1>\n        <button onClick={this.plusCount}>+</button>\n        <button onClick={this.minusCount}>-</button>\n        <button onClick={this.handleToggleCounter}>{isVisible ? \"hide\" : \"show\"}</button>\n        {isVisible && counter === 10 ? <p>Ты красавчик</p> : null}\n      </>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}